<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-08T15:11:15.738Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>9月8日学习总结</title>
    <link href="http://example.com/2021/09/08/9%E6%9C%888%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/09/08/9%E6%9C%888%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-08T14:52:22.000Z</published>
    <updated>2021-09-08T15:11:15.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><span id="more"></span><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><p>线性方程组刷题</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>翻译课文</p><h2 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h2><p>刷题</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>学习了选择排序：简单选择排序、堆排序。选择排序的基本思想就是总是选择最大（小）的数放在第一个，然后以此按照规律排序。<br>堆排序比较重要。堆实质上可以理解为一棵完全二叉树，可以分为大顶堆和小顶堆。大顶堆就是父节点大于左右孩子，对应导出递增序列；小顶堆就是父节点都小于左右孩子，对应导出递减序列。堆排序的算法每一次排序后父节点都是最大（小）的，下一次开始排序前，将这个最大（小）的节点移动到当前最后一个未排序子序列节点处，至此后面的子序列都是排好序的节点序列了。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>9月7号学习总结</title>
    <link href="http://example.com/2021/09/07/9%E6%9C%887%E5%8F%B7%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/09/07/9%E6%9C%887%E5%8F%B7%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-07T14:53:53.000Z</published>
    <updated>2021-09-07T16:04:37.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><span id="more"></span><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><p>今天弄懂了抽象线性方程组的部分习题。主要是抽象性的方程组将解带入可以得到的解形式，通过解的线性组合可以得到A * x=0或者A * x=b的解。主要理解了如何带入。</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>翻译课文</p><h2 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h2><p>学习了实践第一节内容。了解了没有实践就无法认识一件事或物。</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>学习了数据结构的倒数第二章，排序。主要学习了插入排序、折半插入排序、希尔排序、冒泡排序、快速排序。</p><ol><li><p>插入排序<br>插入排序每次从待排数组的第二个（下标为1）为待排数字，然后待排数字会和他左边的数据进行比较，如果左边数字比他大，则和左边数字交换位置，直到交换到左边数字小于待排数字为止。每次待排数字的左边所有数据都是以及排序好的，所以新的待排数字只要在左边已经排序的顺序中找到他自己的位置即可。</p></li><li><p>折半插入排序<br>该排序为插入排序的优化，引入了low与high，最开始low指向已排序好的顺序队首，high指向已排序好的顺序队尾，mid为两者下标之和除2。当mid指向的数字比待排数字大时，则将high移动到mid-1的位置，mid为两者下标之和除2；当mid指向数字比待排数字小时，将low移动到mid+1的位置，mid为两者下标之和除2。直到low&gt;high,算法结束。需要注意的是，当mid等于待排元素时，应当将low=mid+1，以保证稳定性。如果high=mid-1,则待排元素会跑到相同元素的左边（原本待排元素应该在相同元素的右边），失去了稳定性。</p></li><li><p>希尔排序<br>又称缩小增量排序。以不同增量，将待排数组分成若干子列，如增量为3，{1，4，7}为一子列，{2，5}为一子列，{3，6}为一子列，然后对每一个子列进行插入排序。结束一轮后缩小增量，重复过程。直到增量为1，即为最后一次排序。</p></li><li><p>冒泡排序<br>看一遍过程便非常好理解。相当于有一个可以容纳两个元素的框框，每一次排序框框内元素都会比较一次大小，交换位置，然后框框就会往右移一格，再次比较。每一次冒泡都会把最大或者最小的一个数移到最右边。</p></li><li><p>快速排序<br>每一趟选择每个子序列的第一个数作为枢轴（中间变量保存），low在子序列的第一个，high在子序列的最后一个。程序开始，high会往左–，直到碰到一个比枢轴小的数字，将这个数字放入low指向的位置，然后low++。然后开始low往右走，直到遇到一个比枢轴大的数，将这个数放入high的位置，然后high++。如此反复，直到low=high。这个时候将枢轴数放入这个位置。左边所有数都比枢轴大，右边所有数都比枢轴小，分为两个子序列。然后对这两个子序列继续进行快速排序，利用了递归算法，直到子序列长度都为1.</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>9月6日学习总结</title>
    <link href="http://example.com/2021/09/06/9%E6%9C%886%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/09/06/9%E6%9C%886%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-06T15:09:51.000Z</published>
    <updated>2021-09-06T15:27:19.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><span id="more"></span><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><p>很遗憾毫无效率。。。希望继续加油</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>翻译课文</p><h2 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h2><p>刷题</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>今天结束了计组I/O方式的程序中断方式以及DMA方式。<br>程序中断方式：<br>当设备发起中断请求时先由硬件完成中断隐指令（软件无法保存PC中的当前程序的地址，所以只能由硬件来完成保存PC中地址的任务）：</p><ol><li>关中断（因为保存PC的任务不能被中断，所以要先关中断）</li><li>保存断点（保存PC）</li><li>引出中断服务程序（将中断服务程序的地址放入PC中）<br>随后执行中断服务程序：</li><li>保护现场</li><li>设备服务</li><li>恢复现场</li><li>开中断</li><li>中断返回</li></ol><p>DMA：<br>在DMA方式中，当I/O设备需要进行数据传送时，通过DMA控制器向CPU提出DMA传送请求，CPU响应后让出系统总线，由DMA控制器接管总线进行数据传送（CPU并不参加数据传送，进一步解放CPU！）</p><ol><li>预处理（CPU负责）</li><li>数据传送（DMA控制器负责）<br>一个字一个字为单位，当传送完毕时WC溢出，即向CPU发出中断请求</li><li>后处理（CPU负责）<br>有很多计算题，需要理解各方式过程。<br>ps:数据传输率n MB/s，每次传输m B，则每秒有 n* 10 ^ 6 / m 个传输次数，即为 n* 10^6/m次中断。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>9月5日学习总结</title>
    <link href="http://example.com/2021/09/05/9%E6%9C%885%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/09/05/9%E6%9C%885%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-05T14:26:41.000Z</published>
    <updated>2021-09-05T15:10:15.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><span id="more"></span><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><p>今天复习了两个方程组的同解与共解问题<br><strong>共解</strong><br>两个方程组的公共解有三种方法可以求：</p><ol><li>联立法 将AB两方程的系数矩阵上下拼接成大矩阵，然后化阶梯求解（用求方程组通解方式一样求），求出的通解就是共解</li><li>k1 *t1+k2 *t2 =T,T是由k1和k2组成的解向量（t1和t2已知）。将T带入要求的方程中，求出k1与k2的关系，即k1=n * k2，代回T，提取出公共任意常数，结果即为共解。（一般该方法用于给出一个方程组和一组解向量，问是否有公共解题型）</li><li>k1 *t1+k2 *t2=l1 *c1+l2 *c2.联立，得到k1,k2,l1,l2的关系（t1,t2,c1,c2为已知解向量，将各常数带入，同一行的参数可以得到一个等式，即关系），代回k1 *t1+k2 *t2=l1 *c1+l2 *c2化简至只剩一个解向量，即为公共解。</li></ol><p><strong>同解</strong><br>顾名思义即为两个方程有共同的解。<br>很简单，算出其中一个方程组的解，代入另一个方程也同样满足。</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>写了四篇课文，单词虽然很多都认识了，但是做题还不够理想。。。</p><h2 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h2><p>学习了否定之否定定律（前进性与曲折性的统一；前途是光明的，道路是曲折的），以及客观辩证法与主观辩证法</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>学习了I/O控制器的结构，功能（1. 选择设备 2.传送命令 3.传送数据 4.反应I/O工作状态），CPU同外设之间信息传送实质是对接口中某些寄存器（或端口）进行读写。<br>内部接口并行传输，外部接口可以进行串/并转化。<br>还学习了I/O端口。接口包括端口以及控制逻辑。端口编制方式有统一编制（在储存空间主存中划分一部分给I/O设备，当贮存访问这部分范围时，就是在访问主存）优点是无需专用的I/O指令，但需要占用内存储存空间。不统一编制，地址与储存器地址分开，但需要单独I/O指令。<br>最后一部分是I/O方式，主要包括程序查询方式，程序中断方式，DMA方式，这些方式在操作系统中有学过，但是在计组中会有新计算题，需要留意与练习。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>9月4日学习总结</title>
    <link href="http://example.com/2021/09/04/9%E6%9C%884%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/09/04/9%E6%9C%884%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-04T14:47:19.000Z</published>
    <updated>2021-09-04T15:14:15.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><span id="more"></span><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><p>今天理解了为什么“2. 当X=A^-1*B时，将A与B拼接，（A|B），将左边 行列式化成标准式，右边行列式即为X”。这其实就是一个非齐次线性方程组只不过解的形式是一个矩阵。A * X=B，，解出X。在非齐次方程组中，我们会把解的列向量拼接上系数矩阵，形成增广矩阵，然后化阶梯型求秩计算解。如果有解，先求A *X=0的解系，然后再加上特解就是通解了。当所求的X为一个矩阵时也一样，只不过右侧解的列向量有n列，通解形式就有n个任意常数乘对应解系再加上特解。<br>当右侧解不是一列而是一个矩阵时，就相当于上升了一个维度。现在还不能很清楚表达出意思出来，还需要多研究一下线性方程组界的结构。但是今天的学习让我理解了原来矩阵相乘、矩阵拼接都可以理解成一个线性方程组乘X的形式，而不是一个简简单单无任何含义的矩阵。</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>翻译课文练习</p><h2 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h2><p>学习了量变质变定律，也领悟到了一些道理：持续的量变才会引起质变，我现在做的事不就是在慢慢的积累量变吗？<br>——“年轻人在30岁之前不要那么想着赚钱，要注重积累”。</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>计算机组成原理I/O系统，大多都是和操作系统所学的内容交叉：中断、DMA、通道。然后就学习了I/O设备，比较重要是显示器的显存计算：分辨率*灰度级位数。（显存中存放的是每个像素点的灰度级二进制数）</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>9月3日学习总结</title>
    <link href="http://example.com/2021/09/03/9%E6%9C%883%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/09/03/9%E6%9C%883%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-03T15:19:58.000Z</published>
    <updated>2021-09-03T16:12:54.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><span id="more"></span><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><p>复习了线性方程组的齐次性还有非齐次性的解法。比较重要的是基础解系S=n-r。<br>以及对应是否有解的条件：</p><ol><li>齐次型线性方程组有唯一解且为零解条件：系数矩阵满秩，系数行列式不得0.有无数解条件：不满秩，系数行列式得0.</li><li>非齐次性线性方程组有唯一解条件：r（A）=r(A|B)=n系数矩阵满秩，系数行列式不得零。有无数解条件：r（A）=r(A|B)&lt; n.无解条件r（A）&lt; r(A|B).<br>系数矩阵其实就相当于方程，齐次非齐次就相当于增广矩阵右侧是否是0或者非0数，所以同一行可以乘或除一个数而不影响，可以方便计算。</li></ol><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>翻译两篇课文</p><h2 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h2><p>学习了矛盾的同一性斗争性，特殊性与普遍性</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>复习了弗洛伊德算法，用于算有向带权图某点到其余各点的最短路径。主要采用了动态规划思想、邻接矩阵数据结构。代码实现非常简单，主要思想是在知道相邻连通节点权值后，A到B是否可以通过k号顶点，可以更短到达。如果更短，则更新邻接矩阵，否则不做处理。这就要用到动态规划思想，A到k的距离再加上k到B的距离必须是之前以及用相同算法处理算出已经是最短的距离。代码实现只要三层FOR循环，时间复杂度为O（n2）.</p><p>拓扑排序AOV网：有向无环图，顶点代表活动，边无权值，边代表活动之前的前后联系。没有当前节点完成就无法完成指向的节点。拓扑排序思想为选择入度为0的点放入栈中，然后将其指向的所有节点入度-1，代表把指向其所有节点的边删掉。然后将入度为零的点再放入栈中，如此循环，直到栈中无入度为0的节点。拓扑排序可能不唯一。</p><p>AOE网关键路径算法：AOE网边表示活动，顶点表示事件，为一瞬间的完成的事，边代表活动持续时间。关键路径算法：</p><ol><li>计算事件（顶点）最早发生时间，第一个顶点（事件0）最早发生时间设为0，顶点A指向的下一个顶点B，B的最早发生时间大小为A的最早发生时间+AB边的权值（活动持续时间时间）。如果一个顶点有两条边指向，就要取max(A的最早发生时间+边的权值)取最大的值为当前顶点的最早发生时间。</li><li>计算事件（顶点）最迟发生时间，将各顶点逆序排列，最后一个事件最迟发生时间为最后一个顶点的最早发生时间。顶点B指向顶点A，B的最迟发生时间为A的最早发生时间-AB边的权值（持续时间）。若B有两条边指出，则取min（A的最早发生时间-AB边的权值）最迟发生时间。</li><li>活动（边）最早发生时间就为<strong>产生</strong>这个事件的顶点的最早发生时间。</li><li>活动（边）最迟发生时间就用该边指向的顶点的最迟发生时间-该边的权值（持续时间）</li><li>计算时间余量，活动（边）的最迟发生时间-活动（边）的最早发生时间，等于0的即为关键路径。表示这条路径一刻也不能拖延！！</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>9月2日学习总结</title>
    <link href="http://example.com/2021/09/02/9%E6%9C%882%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/09/02/9%E6%9C%882%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-02T15:40:39.000Z</published>
    <updated>2021-09-02T16:09:20.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><span id="more"></span><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><p>今天复习了矩阵的秩章节，因为在做向量组的题目时关于秩的问题有很大障碍，我觉得很有必要要重温一下前面秩的概念，打牢基础。<br>总结了几个很重要的考点知识点：</p><ol><li>r(AB)&gt;=r(A)+r(B)-n可以综合非零矩阵的秩大于等于1、r(AB)&lt;=min(r(A),r(B))计算出秩的范围</li><li>如果A是可逆矩阵,A行列式必不为0，必满秩</li><li>如A是可逆矩阵，r(AB)=r(BA)=r(B)</li></ol><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><ol><li>复习了数据结构最小生成树的Prim算法和克鲁斯塔尔算法。</li><li>学习了伟大的迪杰斯特拉算法（单源最短路径）。<br>大致思想：构建三个数组：dist []用于保存当前节点距离选中节点最短路径，如果不可达值置于无穷大。path []用于显示当前节点的前驱节点。set []用于显示该节点是否以及找到最短路径。<br>第一轮会从初始节点到所有可达节点选择最短的（dist [] 值最小的节点），将其set []对应值修改为true，表示已经找到最短路径，将其path []值修改为出发的节点。<br>随后选择刚刚已经找到最短路径的节点，将其所有可达节点的路径长度分别加上他的dist []值，与可达节点对应当前dist []中值比大小，如果大则不做处理，如果小则做更新。第二轮开始从dist []数组中选择数值最小的点，将其标记为找到最短路径。反复循环，直到所有点set []均被标记。<br>表述比较混乱。。。完全个人理解。。。后续有空会更新配上图示，更方便理解。<br>需要注意的是，当有向图权值出现负数时，迪杰斯特拉算法会失效。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天是焦虑的一天。在放弃考研去找工作与继续坐牢复习之间做心理斗争。。。我给自己找了很多理由，包括去找我最爱的女朋友，可是这也不足以让我可以在那找到一份配得上我期望的工作，是的我根本不配，没能力也没资本。说什么学历是不重要的根本是胡说八道，说什么三年之后行业风向谁也说不准也对。但是谁也说不准未来会发生什么。我也不知道我能否考上。我知道希望渺茫，但如果放弃就没有希望。我只要做好自己的规划，按部就班的执行，不管什么结果我都预想到了，也有自己的备用方案。现在能做的就是努力，争取不要用到所谓的备用方案。加油吧，努力才不会焦虑。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>9月1日学习总结</title>
    <link href="http://example.com/2021/09/01/9%E6%9C%881%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/09/01/9%E6%9C%881%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-09-01T15:24:42.000Z</published>
    <updated>2021-09-01T16:01:55.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><span id="more"></span><p>前几天停止学习几天，状态下降，很难再进入高效学习状态。这几天主要任务就是重新进入之前的学习状态，管住自己、关注自己的心。</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>今天学习完了计算机网络第一轮复习最后一章应用层的两个模型（C/S模型和P2P模型）<br><code>C/S模型是用户端加服务端，P2P是各个主机作为用户端以及服务端</code><br>DNS（C/S）<br><code>域名解析系统：从右至左顶级域名、二级。。。</code><br><code>DNS域名服务器比较重要，与主机端最近的是本地域名服务器，每次主机发送DNS请求都是第一个查询本地域名服务器。其次是根域名服务器，下面管理着对应的顶级域名服务器，再下层就是权限域名服务器，这个时候就解析了想要的域名</code><br>DNS查询有两种方式：</p><ol><li>迭代查询<br>主机向本地服务器发送要解析的域名，然后由本地服务器向根域名服务器查询，根域名服务器再告诉本地，本地再去找顶级等等。总结就是全程都由本地域名服务器去查询，简称靠自己。</li><li>递归查询<br>主机向本地域名服务器发送请求，本地向根域名服务器发送请求，根再接手向顶级域名服务器发送查询等等。依次将查找的任务交给下一级域名服务器，简称靠别人去查。</li></ol><p>FTP（C/S）<br>TCP连接，控制进程负责传送请求，数据传送进程负责传送文件。控制进程会保持一直打开，数据传送进程在传送完文件后便关闭。</p><p>电子邮件（C/S）<br>SMTP用于发送；POP3用于提取文件。</p><p>www和HTTP<br>万维网：使用URL来标志WWW上的各种HTML文件<br>HTTP：超文本传送协议，传送HTML文件从服务器至用户<br>还不是学习很深刻。。。仅局限与了解。。。还会继续学习！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>8月24日学习总结</title>
    <link href="http://example.com/2021/08/24/8%E6%9C%8824%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/08/24/8%E6%9C%8824%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-08-24T14:01:00.000Z</published>
    <updated>2021-08-24T16:08:00.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><span id="more"></span><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><p>矩阵练习</p><ol><li>矩阵乘法有分配律，结合律，一般情况不满足交换律！！！</li><li>当X=A^-1*B时，将A与B拼接，（A|B），将左边 行列式化成标准式，右边行列式即为X</li><li>当拼接行列式（A|B）时，AB同一行提取公因式或者同时乘以相同数时不用提取到矩阵外部，只管凑数即可。需要注意的是左边矩阵行乘除后右边矩阵相同行也要相同操作！行列式计算值可以行列互换，矩阵计算时只能行互换。</li></ol><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>翻译课文<br>disregard,enviable,character,favour,lobby,intrude,intrusion,meadow,critical，infrastructure,struck,explict,endorse,leisure,rate,poll</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>复习了计算机组成原理的总线部分，为了使设备增减外部设备变得容易，采取了总线结构，分时共享是总线的两个特点。分时是指同一时刻只能允许一个部件使用总线，所以要分时使用；共享是一条总线共享给多个设备使用、接受。<br>还学习了总线的分类，比较重要的是按照传送方式分类：并行传输总线（多根线多位传输）、串行传输总线（单线单位传输）。按连接部件可以划分为：片内总线、系统总线、通信总线。片内总线顾名思义是芯片内部的总线。系统总线比较重要，包含数据总线（传递各功能部件的信息，包括指令，操作数，中断类信号【多考！】，I/O接口的命令字状态字。是双向传输总线），地址总线（传输地址，单向传输总线），控制总线（传输各种控制信号）。<br>几个重要概念：总线宽度：指总线有多少根，一根1bit!!!总线带宽：一秒单位时间内可以传输数据的位数【常考】，总线复用：地址总线和数据总线公用一组线。信号线数：三类系统总线数量之和。<br>总线结构：单总线结构（CPU,主存，I/O设备全在一条总线上）逻辑简单，但是由于I/O速率与主存速率不匹配，降低效率。双总线结构（将I/O设备从总线上剥离出来，形成主存总线与I/O总线分离），每次主存与I/O设备交换数据都要通过CPU，CPU干预程度高。三总线结构(加入DMA总线，I/O总线可与主存直接交换数据)减少了CPU的干预。【参照操作系统I/O控制方式】<br>总线的操作与定时：同步定时方式与异步定时方式。<br>同步：采用统一时钟信号来协调发送和接受双方的传送定时。传输周期：一、发出地址信息二、发出读命令三、提取数据四、撤销读命令。输出周期：一、发出地址信息二、提取数据三、发出写命令四、撤销写命令。优点：传输速度快，但是统一时钟要按照最慢的模块设置时钟，损失效率。<br>异步：主模块：发送请求的模块（发送方）。从模块：接受请求模块（接收方）。不互锁方式：主模块不等从模块应答，从模块不等主模块回复，都默认对方已经成功收到信息。半互锁方式：主模块向从模块发起请求后，必须等待从模块回复“已经收到”，后直接开始通信。全互锁方式：主模块向从模块发起请求后，从模块回复主模块“我已成功收到”，主模块再次向从模块回复（回复从模块的回复）“好的，我收到你的回复，我要开始通信了”，随后开始通信，类似于TCP的三次握手。异步通信可用于并行或串行传输！<br>总线标准：系统总线标准：ISA（工业标准体系结构总线），EISA（ISA的拓展），VESA（多媒体屏幕VESA接口），PCI（硬盘，即插即用），PCI-E（最新总线接口标准）。设备总线标准：IDE(一种IDE接口磁盘接口类型)，AGP(加速图形接口)，USB（实现外设的快速连接，是串行总线！！！），SATA（串行，硬盘接口）</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>8月23日学习总结</title>
    <link href="http://example.com/2021/08/23/8%E6%9C%8823%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/08/23/8%E6%9C%8823%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-08-23T14:19:41.000Z</published>
    <updated>2021-08-23T15:54:05.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><span id="more"></span><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><p>线性代数矩阵刷选择题</p><ol><li>矩阵乘法不能交换次序</li><li>矩阵若秩不满，则行列式等于0；反之，若满秩，则行列式不等于0</li></ol><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>翻译英语课文一篇，总结单词与翻译语法<br>notion,elevate,compliance,revise,sanction,adornment,inherent,intangible,hint,arbiter,tape,uplifting,incite,parliament</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>学习了TCP协议的连接控制：建立连接（三次握手），释放连接（四次握手）。TCP的流量管理（ack,rwnd剩余可以接收的大小,以此来限制发送方不要发送而太快），拥塞管理（慢开始，快重传，快恢复）</p><ol><li><p>三次握手：第一次发送方申请建立连接，SYN=1，seq=x;第二次接收方向发送方发送确认申请连接，SYN=1，ACK=1,seq=y,ack=x+1(确认收到x号请求，并且期望收到序号为x+1的字段)；第三次发送方确认接收方的确认报文，ACK=1，seq=x+1,ack=y+1(确认收到y号字段请求，并且期望收到序号为y+1的字段)<br>为什么是三次：两次握手的话当接收方向发送发发送确认报文，如果途中第二个报文丢失，接收方已经准备可以接受，但是发送方却不知道接收方可以接受，故一直等待不能开始发送。通俗来讲，就是要发送方向接收方申请建立连接，接收方告诉发送方我可以开始接受，然后发送方再一次告诉接收方我要开始发送了，共三次“握手”。</p></li><li><p>四次握手：发送方向接收方发送信息：我已经发送完了（FIN=1，ack=u）,接收方收到消息，告诉发送方收到（ACK=1，ack=u+1），此时发送方的连接可以断开。等待接收方向发送方发送完数据之后，向发送方发送结束报文，告诉发送方我已经把数据发送完了（FIN=1,ack依然是u+1），发送方收到后，等待2MSL，向接收方发送确认报文：我已收到。此时双方的连接完全结束。</p></li><li><p>流量管理：ARQ，停止等待协议，选择重传协议…与之前数据链路层所学的知识相差无异。（累计确认等等名词需要好好复习巩固）</p></li><li><p>拥塞控制：发送窗口，拥塞窗口，网络拥塞阈值<br>慢开始：初始发送窗口大小为1，当发送文件数小于等于阈值时，每接收到一批发送的所有确认报文后，发送窗口大小*2；以此反复，直到发送文件数到达阈值，开始每次确认发送完一批，发送窗口大小执行加法，每次增加一个大小。当网络开始拥塞时，发送窗口重新设置为1，阈值大小减小一半，然后重新开始计算。没到阈值窗口大小 *2，到达阈值后窗口大小每次加1.</p></li></ol><p>快重传：当发送方连续三次收到同一个确认报文时，直接开始重传，而不用等待重传计时器，从而达到“快”的重传效率。</p><p>快恢复：与慢开始一致，但是当网络拥塞时，发送窗口大小不降为1，而是降到阈值1/2后的位置，然后每一次接收后窗口大小加1,意味快速“恢复”。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>8月22日学习总结</title>
    <link href="http://example.com/2021/08/22/8%E6%9C%8822%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/08/22/8%E6%9C%8822%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-08-22T14:30:59.000Z</published>
    <updated>2021-08-22T15:05:32.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><h2 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h2><p>学习了联系与发展的概念，原因与结果，必然与偶然</p><span id="more"></span><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>翻译了一篇课文，积累了单词与翻译逻辑<br>复习的单词有：<br>leading,benefactor,prominent,presuppose,literature,craft,coherent,curricula,deprive,portray,setback,obstruct,obscure</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>学习了计算机网络，开始复习传输层，学习了UDP与TCP的概念<br>传输层是为了实现应用进程之间提供服务<br>udp是面向无连接，不可靠的传输；TCP是面向连接，可靠的传输<br>学习了TCP的报文段的首部结构，各字段的含义</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;&lt;h2 id=&quot;政治&quot;&gt;&lt;a href=&quot;#政治&quot; class=&quot;headerlink&quot; title=&quot;政治&quot;&gt;&lt;/a&gt;政治&lt;/h2&gt;&lt;p&gt;学习了联系与发展的概念，原因与结果，必然与偶然&lt;/p&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>博客功能熟悉完善</title>
    <link href="http://example.com/2021/08/22/%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E7%86%9F%E6%82%89%E5%AE%8C%E5%96%84/"/>
    <id>http://example.com/2021/08/22/%E5%8D%9A%E5%AE%A2%E5%8A%9F%E8%83%BD%E7%86%9F%E6%82%89%E5%AE%8C%E5%96%84/</id>
    <published>2021-08-21T16:43:03.000Z</published>
    <updated>2021-08-22T15:06:36.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h2><p>一开始不知道如何使用博客的TAG与CATE功能<span id="more"></span>,不知道怎么打开文件的TAG与CATE然后放到左侧导航栏中。最初以为是_config文件中没有打开设置，后来发现原来只要在post的文件头中加入字段tag与categories，后面自定义输入内容就可以放入左侧的导航栏中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客功能熟悉完善</span><br><span class="line">date: 2021-08-22 00:43:03</span><br><span class="line">tags: 技术</span><br><span class="line">categories: blog</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;完善&quot;&gt;&lt;a href=&quot;#完善&quot; class=&quot;headerlink&quot; title=&quot;完善&quot;&gt;&lt;/a&gt;完善&lt;/h2&gt;&lt;p&gt;一开始不知道如何使用博客的TAG与CATE功能</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="导航栏" scheme="http://example.com/tags/%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>8月21日学习总结</title>
    <link href="http://example.com/2021/08/22/8%E6%9C%8821%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/08/22/8%E6%9C%8821%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-08-21T16:08:24.000Z</published>
    <updated>2021-08-22T14:30:28.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><h2 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h2><span id="more"></span><p>对矩阵逆矩阵的求法，抽象矩阵算式的计算与推导进行了题目练习，并且对举证的秩有了一定复习。秩是矩阵以及后面的重点，必须要以理解与练习结合。</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p>翻译了两篇课文，难度不大，主要是熟悉语法还有单词。</p><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>复习了数据结构的图的存储表：邻接表法和十字链表法，了解了其原理。然后复习了图的最小生成图的普利姆算法以及克鲁斯卡尔算法，可以对其进行手工绘制最小生成图。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;&lt;h2 id=&quot;高数&quot;&gt;&lt;a href=&quot;#高数&quot; class=&quot;headerlink&quot; title=&quot;高数&quot;&gt;&lt;/a&gt;高数&lt;/h2&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>8月20日学习总结</title>
    <link href="http://example.com/2021/08/21/8%E6%9C%8820%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/08/21/8%E6%9C%8820%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-08-20T16:19:20.000Z</published>
    <updated>2021-08-22T13:46:19.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><h3 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h3><span id="more"></span><p>复习了行列式以及矩阵逆矩阵的定义以及计算，熟悉了行列式各种形式的计算方法，还有矩阵逆矩阵的求法。<br>矩阵开始就会有很多的公式需要记忆，重点是围绕逆矩阵展开，例如求逆矩阵可以使用“伴随矩阵法“、”初等变换矩阵法“，然后伴随矩阵和矩阵以及矩阵的逆矩阵还有矩阵的行列式有大量的公式和定理定义。如：一个数乘上一个n阶矩阵等于一个数的n次方乘以他的行列式，<code>A*/|A|=A^-1</code>(很重要)等等。都需要练习还有背诵去加深印象。</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>今天翻译了一篇文章，虽然文章不难，但是搞懂了所有单词意思，能够翻译出全文的大致意思。<br>重点单词：<br>entile、instinct、zeal、subsidise、indulgent、preside、prescription、prescribe、negligible、initiate、ingenious、eligible</p><p>单词不多，也不难，但都是基础单词，需要记忆</p><h3 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h3><p>今天学习了操作系统的I/O系统，I/O设备的分类，依靠各种特性的分类，I/O控制器的组成还有原理，纯记忆还有理解背诵即可。<br>还有I/O系统的控制方式，比较重要。</p><ol><li>程序直接控制方式：CPU发出一条I/O指令后，等待该条指令完成后再执行其他操作，以单个字为操作单位，CPU干预程度极高，且大部分时间处在忙等状态，效率极低。</li><li>中断驱动方式：与上面不同的是，引入了中断机制，发出I/O指令后可以去干其他事，等到完成后会向CPU发出中断指令，但还是以单个字为操作对象，干预程度也很高。</li><li>DMA：加入DMA控制器，CPU只需要将本次I/O要干的事一件一件告诉DMA控制器（本质是将信息放入DMA中的寄存器中）,然后CPU就可以去干其他事了，等待完成后，会向CPU发出中断，CPU干预程度又一次下降，并且可以一次性读多个字，以块为单位与CPU交换数据。</li><li>通道控制：通道就是一个低配版CPU，但是还是要与CPU共享内存。当CPU要执行I/O操作时，只需要从内存中调出通道程序，通道程序会去让通道完成所有的I/O操作，CPU就更少干预了，并且可以以一组块为交换单位，效率更高。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天中午出去陪家人吃了饭，导致下午效率有点低哈哈哈，明天继续努力啊，不管是学习考研还是学习专业知识，都不要浪费自己的时间，将时间有意义化，毕竟我的差距和别人拉开的太大了，加油吧。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;今日总结&quot;&gt;&lt;a href=&quot;#今日总结&quot; class=&quot;headerlink&quot; title=&quot;今日总结&quot;&gt;&lt;/a&gt;今日总结&lt;/h2&gt;&lt;h3 id=&quot;高数&quot;&gt;&lt;a href=&quot;#高数&quot; class=&quot;headerlink&quot; title=&quot;高数&quot;&gt;&lt;/a&gt;高数&lt;/h3&gt;</summary>
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://example.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>学习Markdown语法的练习博客</title>
    <link href="http://example.com/2021/08/19/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2021/08/19/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</id>
    <published>2021-08-19T15:07:09.000Z</published>
    <updated>2021-08-21T14:57:10.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、一级大标题的使用"><a href="#一、一级大标题的使用" class="headerlink" title="一、一级大标题的使用"></a>一、一级大标题的使用</h2><p>标题是比较常用的到的格式，只需要在标题前加上一个‘#’即可</p><span id="more"></span><hr><h2 id="二、字体加粗"><a href="#二、字体加粗" class="headerlink" title="二、字体加粗"></a>二、字体加粗</h2><p>在需要加粗的字体前后加上就像这样</p><hr><h2 id="三、代码块的使用"><a href="#三、代码块的使用" class="headerlink" title="三、代码块的使用"></a>三、代码块的使用</h2><p>在代码前后加上```就可以实现代码块；如果不适用代码块，直接贴代码就有如下的效果<br>#include &lt;stdio.h&gt;</p><p>int main()<br>{<br>    /* 我的第一个 C 程序 */<br>    printf(“Hello, World! \n”);<br>    return 0;<br>}<br>但是如果使用代码块，就能将代码标亮并且有行数提示，更加美观，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    /* 我的第一个 C 程序 */</span><br><span class="line">    printf(“Hello, World! \n”);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是行内代码块：用单个`表示<br><code>printf(“Hello, World! \n”);</code></p><hr><h2 id="四、文字引用"><a href="#四、文字引用" class="headerlink" title="四、文字引用"></a>四、文字引用</h2><p>分层结构可以使文字结构更加清晰明了</p><blockquote><p>我是一层</p><blockquote><p>我是二层<br>就算这里继续使用一个箭头还是无法跳出第二层的</p><blockquote><p>我是第三层</p></blockquote></blockquote></blockquote><blockquote><p>空一行就可以跳出之前的层数</p></blockquote><hr><h2 id="五、表格"><a href="#五、表格" class="headerlink" title="五、表格"></a>五、表格</h2><p>第二行的符号-表示对齐方式,-表示默认，-–:表示右对齐，\：—表示左对齐.注意表格前一定要空行！！！不然无法识别</p><table><thead><tr><th>商品</th><th align="right">数量</th><th align="center">单价</th></tr></thead><tbody><tr><td>苹果</td><td align="right">10</td><td align="center">$1</td></tr><tr><td>电脑</td><td align="right">1</td><td align="center">$1000</td></tr></tbody></table><hr><h2 id="六、有序列表"><a href="#六、有序列表" class="headerlink" title="六、有序列表"></a>六、有序列表</h2><p>在数字.后面加上空格既可以生成有序列表</p><hr><h2 id="N、总结（FOR-NOW…）"><a href="#N、总结（FOR-NOW…）" class="headerlink" title="N、总结（FOR NOW…）"></a>N、总结（FOR NOW…）</h2><p>还有很多Markdown语法，但是由于学习时间有限，先学习到这里，等后续继续学习了还会在这里补充。<br>现在对今天所学进行总结：</p><ol><li>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，可以很容易转化成 HTML 或者 PDF！</li><li>很多格式后面要注意空格空行，不然无法识别出来，如##、以及有序列表（空格），分割线—（空行）</li><li>如果你想在文字中加入一些语法符号，可以写在前面加上\，即可转义****</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、一级大标题的使用&quot;&gt;&lt;a href=&quot;#一、一级大标题的使用&quot; class=&quot;headerlink&quot; title=&quot;一、一级大标题的使用&quot;&gt;&lt;/a&gt;一、一级大标题的使用&lt;/h2&gt;&lt;p&gt;标题是比较常用的到的格式，只需要在标题前加上一个‘#’即可&lt;/p&gt;</summary>
    
    
    
    
    <category term="技术" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
